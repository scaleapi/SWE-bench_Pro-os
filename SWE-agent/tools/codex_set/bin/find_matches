#!/bin/bash
set -euo pipefail

# Parse arguments
QUERY=""
PATH_ARG=""
MAX_RESULTS=50

while [[ $# -gt 0 ]]; do
    case "$1" in
        --query)
            QUERY="$2"
            shift 2
            ;;
        --path)
            PATH_ARG="$2"
            shift 2
            ;;
        --max_results)
            MAX_RESULTS="$2"
            shift 2
            ;;
        *)
            echo "Error: Unknown argument $1"
            exit 1
            ;;
    esac
done

# Validate query
if [[ -z "$QUERY" ]]; then
    echo "Error: query argument is required"
    exit 1
fi

# Default to current directory if no path provided
if [[ -z "$PATH_ARG" ]]; then
    PATH_ARG="."
fi

# Check if path exists
if [[ ! -e "$PATH_ARG" ]]; then
    echo "Error: Path not found: $PATH_ARG"
    exit 1
fi

# Validate max_results
if [[ ! "$MAX_RESULTS" =~ ^[0-9]+$ ]] || [[ "$MAX_RESULTS" -lt 1 ]]; then
    echo "Error: max_results must be a positive integer (got: $MAX_RESULTS)"
    exit 1
fi

# Use ripgrep if available, otherwise fall back to grep
if command -v rg &> /dev/null; then
    # Use ripgrep with better defaults
    # -n: show line numbers
    # -H: show file names
    # --no-heading: show file:line: format
    # --max-count: limit matches per file
    # -g '!.*': ignore hidden files
    rg -n -H --no-heading --max-count="$MAX_RESULTS" "$QUERY" "$PATH_ARG" 2>/dev/null | head -n "$MAX_RESULTS" || {
        echo "No matches found for query: $QUERY"
        exit 0
    }
else
    # Fallback to grep
    # -r: recursive
    # -n: show line numbers
    # -H: show file names
    # --exclude-dir: exclude hidden directories
    # --exclude: exclude hidden files
    grep -r -n -H --exclude-dir='.*' --exclude='.*' "$QUERY" "$PATH_ARG" 2>/dev/null | head -n "$MAX_RESULTS" || {
        echo "No matches found for query: $QUERY"
        exit 0
    }
fi
